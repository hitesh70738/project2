pipeline{
    agent any
    environment{
        DATABASE_URI = credentials("DATABASE_URI")
        AUTHOR = credentials("AUTHOR")
        app_version = '2.0'
        roolback = 'false'
        replicas = 5
    }
    stages{
        stage("Testing"){
            steps{
                if (env.rollback == 'false'){
                sh "bash jenkins/test.sh"
                }
            }
        }
        stage("Build & Push"){
            steps{
                // install docker and docker-compose
                // add jenkins to docker group
                // sudo su - jenkins, docker login
                // docker-compose build and push
                if (env.rollback == 'false')
                sh "bash jenkins/build_images.sh"
            }
        }
        stage("Config Management (ansible)"){
            steps{
                // write out playbook, inventory
                // with roles
                // ssh keys generated from jenkins machine for jenkins user (ssh-keygen)
                // sudo su - jenkins, install ansible on this machine for jenkins
                // jenkins runs playbook
                if (env.rollback == 'false')
                sh "cd ansible && /home/jenkins/.local/bin/ansible-playbook -i inventory playbook.yaml"
            }
        }
        stage("Deploy"){
            steps{
                // copy docker-compose.yaml over ssh (scp command)
                // set env variables on swarm manager
                // ssh into swarm manager to deploy the stack
                sh "bash jenkins/deploy.sh"

            }
        }
    }
    post {
        always {
            junit '**/junit.xml'
            cobertura coberturaReportFile: '**/coverage.xml', failNoReports: false, failUnstable: false, onlyStable: false
        }    
    }
}